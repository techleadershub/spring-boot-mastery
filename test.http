### Variables
@host = http://localhost:8080
@user_auth = Basic dXNlcjp1c2VyMTIz
@admin_auth = Basic YWRtaW46YWRtaW4xMjM=

### 1. Public Access Tests

### Public Endpoint (No Auth Required)
GET {{host}}/api/public

### 2. User Role Tests

### Access User Endpoint as User
GET {{host}}/api/user
Authorization: {{user_auth}}

### Create Data as User
POST {{host}}/api/data
Authorization: {{user_auth}}
Content-Type: application/json

{
    "data": "Test data created by user"
}

### Get Own Data as User
# First create data using the above request, then use the returned ID
GET {{host}}/api/data/1
Authorization: {{user_auth}}

### Update Own Data as User
PUT {{host}}/api/data/1
Authorization: {{user_auth}}
Content-Type: application/json

{
    "data": "Updated test data by user"
}

### Try to Delete Data as User (Should Fail - 403 Forbidden)
DELETE {{host}}/api/data/1
Authorization: {{user_auth}}

### Try to Access Admin Endpoint as User (Should Fail - 403 Forbidden)
GET {{host}}/api/admin
Authorization: {{user_auth}}

### 3. Admin Role Tests

### Access Admin Endpoint as Admin
GET {{host}}/api/admin
Authorization: {{admin_auth}}

### Create Data as Admin
POST {{host}}/api/data
Authorization: {{admin_auth}}
Content-Type: application/json

{
    "data": "Test data created by admin"
}

### Get All Data as Admin
GET {{host}}/api/admin
Authorization: {{admin_auth}}

### Delete Data as Admin
DELETE {{host}}/api/data/1
Authorization: {{admin_auth}}

### 4. Data Ownership Tests

### Create Data as User 1
POST {{host}}/api/data
Authorization: {{user_auth}}
Content-Type: application/json

{
    "data": "Data owned by user1"
}

### Try to Access User1's Data as Admin (Should Work)
GET {{host}}/api/data/1
Authorization: {{admin_auth}}

### Try to Access Other User's Data as User (Should Fail - 403 Forbidden)
# First create data as user1, then try to access with user2
GET {{host}}/api/data/1
Authorization: {{user_auth}}

### 5. Error Cases

### Access Protected Endpoint without Auth (Should Fail - 401 Unauthorized)
GET {{host}}/api/user

### Access with Invalid Credentials (Should Fail - 401 Unauthorized)
GET {{host}}/api/user
Authorization: Basic aW52YWxpZDppbnZhbGlk

### Try to Access Non-existent Data (Should Fail - 404 Not Found)
GET {{host}}/api/data/999
Authorization: {{user_auth}}

### Try to Update Non-existent Data (Should Fail - 404 Not Found)
PUT {{host}}/api/data/999
Authorization: {{user_auth}}
Content-Type: application/json

{
    "data": "This should fail"
}

### 6. Method Security Annotation Tests

### @PreAuthorize Test - hasRole('ADMIN')
GET {{host}}/api/admin
Authorization: {{admin_auth}}

### @PostAuthorize Test - returnObject.owner == authentication.name
GET {{host}}/api/data/1
Authorization: {{user_auth}}

### @Secured Test - @Secured("ROLE_USER")
PUT {{host}}/api/data/1
Authorization: {{user_auth}}
Content-Type: application/json

{
    "data": "Testing @Secured annotation"
}

### Expected HTTP Status Codes:
# 200 OK: Successful request
# 201 Created: Successful data creation
# 401 Unauthorized: Missing or invalid authentication
# 403 Forbidden: Valid authentication but insufficient permissions
# 404 Not Found: Resource doesn't exist
# 500 Internal Server Error: Server-side error
