### Variables
@host = http://localhost:9000
@api = {{host}}/api

### 1. User Registration and Public Endpoints

### Register a new regular user
POST {{api}}/auth/register
Content-Type: application/json

{
    "username": "user1",
    "email": "user1@example.com",
    "password": "password123",
    "roles": ["USER"]
}

### Register an admin user
POST {{api}}/auth/register
Content-Type: application/json

{
    "username": "admin1",
    "email": "admin1@example.com",
    "password": "admin123",
    "roles": ["ADMIN", "USER"]
}

### Test duplicate username (should fail)
POST {{api}}/auth/register
Content-Type: application/json

{
    "username": "user1",
    "email": "another@example.com",
    "password": "password123",
    "roles": ["USER"]
}

### 2. Protected Endpoints (Basic Auth Required)

### Get current user details (using default user)
GET {{api}}/users/me
Authorization: Basic dXNlcjp1c2VyMTIz

### Get current user details (using registered user)
GET {{api}}/users/me
Authorization: Basic dXNlcjE6cGFzc3dvcmQxMjM=

### List all users (using default admin)
GET {{api}}/users
Authorization: Basic YWRtaW46YWRtaW4xMjM=

### List all users (using registered admin)
GET {{api}}/users
Authorization: Basic YWRtaW4xOmFkbWluMTIz

### Get user by ID (admin only)
GET {{api}}/users/1
Authorization: Basic YWRtaW46YWRtaW4xMjM=

### Update user roles (admin only)
PUT {{api}}/users/2/roles
Content-Type: application/json
Authorization: Basic YWRtaW46YWRtaW4xMjM=

{
    "roles": ["ADMIN", "USER"]
}

### Delete user (admin only)
DELETE {{api}}/users/3
Authorization: Basic YWRtaW46YWRtaW4xMjM=

### 3. Error Cases

### Access admin endpoint as regular user (should fail with 403)
GET {{api}}/users
Authorization: Basic dXNlcjp1c2VyMTIz

### Access protected endpoint without auth (should fail with 401)
GET {{api}}/users/me

### Access with invalid credentials (should fail with 401)
GET {{api}}/users/me
Authorization: Basic aW52YWxpZDppbnZhbGlk

### Register with invalid data (should fail with 400)
POST {{api}}/auth/register
Content-Type: application/json

{
    "username": "u",
    "email": "invalid-email",
    "password": "short",
    "roles": ["INVALID_ROLE"]
}

### Testing Instructions:
# 1. User Registration:
#    - Registration endpoints are public (no auth required)
#    - Test validation rules (username length, email format, password strength)
#    - Test duplicate username/email handling

# 2. Authentication:
#    - All protected endpoints require Basic Auth header
#    - Format: Authorization: Basic base64(username:password)
#    - Test with both valid and invalid credentials

# 3. User Management:
#    - All operations require Basic Auth
#    - Admin operations require ADMIN role
#    - Regular users can only access their own data

### Expected HTTP Status Codes:
# 201 Created: Successful registration
# 200 OK: Successful request
# 204 No Content: Successful deletion
# 400 Bad Request: Validation error
# 401 Unauthorized: Missing/invalid credentials
# 403 Forbidden: Insufficient permissions
# 404 Not Found: Resource not found
# 409 Conflict: Duplicate username/email

### Base64 Encoded Credentials:
# Default users (created on startup):
# user:user123        -> dXNlcjp1c2VyMTIz
# admin:admin123      -> YWRtaW46YWRtaW4xMjM=
#
# Registered users (created via API):
# user1:password123   -> dXNlcjE6cGFzc3dvcmQxMjM=
# admin1:admin123     -> YWRtaW4xOmFkbWluMTIz=
# invalid:invalid     -> aW52YWxpZDppbnZhbGlk
